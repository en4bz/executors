#ifndef EXECUTOR_HPP
#define EXECUTOR_HPP

#include <future>
#include <functional>
#include <type_traits>

namespace std {
namespace experimental {
    class executor {
    public:
        virtual void add(function<void()>) = 0;
        virtual ~executor() {};
    };

    class scheduled_executor : public executor {
    public:
        virtual void add_at(function<void()>, chrono::steady_clock::time_point) = 0;
        virtual void add_after(function<void()>, chrono::steady_clock::duration) = 0;
    };

    template<typename Func, typename... Args>
    future< typename result_of<Func(Args...)>::type >
    add(executor& ex, Func&& fn, Args... args) {
        typedef typename result_of<Func(Args...)>::type return_type;
        auto task = make_shared<packaged_task<return_type()>>(bind(forward<Func>(fn), forward<Args>(args)...) );
        future<return_type> result = task->get_future();
        ex.add([task](){ (*task)(); });
        return result;
    }
}
}
#endif
